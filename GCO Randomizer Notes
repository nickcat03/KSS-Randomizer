
Only swap one-ways with one-ways and two-ways with two-ways
- First randomize branching paths, then dead ends fill the blanks
- Option to randomize save rooms
Randomize chest contents (make sure all 60 are collectable)
Randomize mini-bosses
Randomize ability stands
Randomize Music (or mute music)

Stretch: Since there aren't that many one-way doors in the game, maybe add custom coordinates that send you back through one-ways so that you can turn one-way doors into two-way doors.

Door Arithmetic (THIS IS NOT IMPORTANT ANYMORE) aka doorithmatic
At $0191D3 there is math done that does the following:
(For cannons and warpstars check routine at $CF6894)
Divide $6894 / $3755

How the game reads door data:
Pointer points to door coords.
ONLY CHANGE THE DOOR COORDS AND THATS IT
Example: the trapdoor room
03 00 B8 02 90 00 3C 00 54 00
03 00 = Room number
B8 02 = Do not change!!
90 00 = Do not change!!
3C 00 = X spawn
54 00 = Y spawn

for making file into runnable script use:
(note, slashes differ between windows and linux)
pyinstaller user_interface.py --noconsole --onefile --add-data "constants\doors.json:constants\" --add-data "constants\rooms.json:constants\


All door locations:

--Subtree--
Starting Hallway: $305F50   02 00 A0 02 60 00 24 00 9C 00
$316E0A
$316E14

08 00 B8 02 90 00 54 00 3C 00
03 00 40 05 A8 00 3C 00 54 00

ROM offsets

ENG - JP1.0
305F50 - 3063A8 458
316E0A - 3174E9 6DF

JP1.1 is same as JP1.2

ENG - JP1.2
305F50 - 30666E 71E 
316E0A - 3175A8 79E

30796D


TG's katam Randomizer Code step by step:

for each value in queue, run this code...

if current door is in the door list:

    (check for dead end, if it is a dead end, move to dead ends and reshuffle)
    if the upcoming door in shuffled list has no exits left in the given room:
        append to dead end list, reshuffle dead end list, and delete the upcoming door in shuffled list

    if not current door in already randomized: (if the door hasn't been randomized yet)
        append the current door to the already randomized list

        (do more dead end tests)
        if the upcoming door in shuffled list has no exits left in the given room:
            append to dead end list, reshuffle dead end list, and delete the upcoming door in shuffled list

        if the length of the two way door list is greater than 0:
            while the upcoming door is equal to its linked counterpart:
                randomize two way list

            (generating new queue)
            (basically, for all doors in the room of the upcoming door in shuffled list, if they aren't already randomized, add them to the queue list)
            for all doors of the upcoming door:
                if not doors in already randomized:
                    append exit to queue list

            (apply randomization)
            randomized_door_list[current_door] = door in the random list
            (apply door link)
            randomized_door_list[door_linked_to_door_in_random_list] = linked_door_of_current_door
            append door_linked_to_door_in_random_list to already randomized list

            bulk remove current linked door from all shuffled lists
            delete the upcoming door in shuffled list

        else (if the two way door list is 0):
            while dead end two way list == linked current door:
                shuffle dead end two ways
            (apply randomization as before and bulk remove)


